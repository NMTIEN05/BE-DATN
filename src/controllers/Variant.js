
import Variant from "../model/Variant.js";
import Product from "../model/Product.js";

import Attribute from "../model/Attribute.js";
import AttributeValue from "../model/AttributeValue.js";
import mongoose from "mongoose";

// [GET] /api/variants
export const getAllVariants = async (req,res) => {
  try {
    const variants = await Variant.find({ deletedAt: null })
        .populate("productId")
  .populate("attributes.attributeId")
  .populate("attributes.attributeValueId");

    res.json(variants);
  } catch (error) {
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch bi·∫øn th·ªÉ", error });
  }
};

export const getVariantById = async (req, res) => {
  try {
    const variantId = req.params.id;

    if (!mongoose.Types.ObjectId.isValid(variantId)) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const variant = await Variant.findById(variantId)
      .populate("attributes.attributeId")
      .populate("attributes.attributeValueId")
      .populate("productId"); // N·∫øu mu·ªën l·∫•y th√™m th√¥ng tin s·∫£n ph·∫©m

    if (!variant) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ" });
    }

    res.json(variant);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y bi·∫øn th·ªÉ:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};
export const getVariantsByProductId = async (req, res) => {
  try {
    const { productId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(productId)) {
      return res.status(400).json({ message: "ProductId kh√¥ng h·ª£p l·ªá" });
    }

    const variants = await Variant.find({ productId, deletedAt: null }) // l·ªçc c·∫£ bi·∫øn th·ªÉ ch∆∞a b·ªã x√≥a m·ªÅm
      .populate("attributes.attributeId")
      .populate("attributes.attributeValueId");

    res.json(variants);
  } catch (error) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch bi·∫øn th·ªÉ:", error);
    res.status(500).json({ message: "L·ªói l·∫•y danh s√°ch bi·∫øn th·ªÉ", error });
  }
};
// [POST] /api/variants
export const createVariant = async (req, res) => {
  try {
    let {
      name,
      imageUrl,
      productId,
      price,
      stock = 0,
      oldPrice = null,
      attributes = [],
    } = req.body;

    const finalAttributes = [];

    // ‚úÖ Chuy·ªÉn attributes d·∫°ng { attributeName, value } th√†nh ƒë√∫ng ID
    for (const attr of attributes) {
      if (attr.attributeId && attr.attributeValueId) {
        finalAttributes.push(attr);
        continue;
      }

      const attribute = await Attribute.findOne({ name: attr.attributeName });
      if (!attribute) {
        return res.status(400).json({ message: `Thu·ªôc t√≠nh '${attr.attributeName}' kh√¥ng t·ªìn t·∫°i.` });
      }

      let value = await AttributeValue.findOne({
        value: attr.value,
        attributeId: attribute._id,
      });

      if (!value) {
        value = await AttributeValue.create({
          value: attr.value,
          attributeId: attribute._id,
        });
      }

      finalAttributes.push({
        attributeId: attribute._id,
        attributeValueId: value._id,
      });
    }

    // ‚úÖ N·∫øu ch∆∞a c√≥ ·∫£nh, th·ª≠ l·∫•y ·∫£nh t·ª´ m√†u
    if (!imageUrl || imageUrl.length === 0) {
      const colorAttr = finalAttributes.find(async (att) => {
        const attribute = await Attribute.findById(att.attributeId);
        return attribute?.name === "M√†u s·∫Øc";
      });

      if (colorAttr) {
        const colorValue = await AttributeValue.findById(colorAttr.attributeValueId);
        if (colorValue?.imageUrl) {
          imageUrl = [colorValue.imageUrl];
        }
      }
    }

    const variant = new Variant({
      name,
      imageUrl,
      productId,
      price,
      oldPrice,
      stock,
      attributes: finalAttributes,
    });

    const saved = await variant.save();

    // üëâ G·∫Øn v√†o s·∫£n ph·∫©m
    await Product.findByIdAndUpdate(productId, {
      $push: { variants: saved._id },
    });

    res.status(201).json(saved);
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o bi·∫øn th·ªÉ:", err);
    res.status(400).json({ message: "L·ªói khi t·∫°o bi·∫øn th·ªÉ", error: err.message });
  }
};
// [PUT] /api/variants/:id
export const updateVariant = async (req,res) => {
  try {
    const updated = await Variant.findByIdAndUpdate(req.params.id, req.body, {
      new: true,
    });
    if (!updated) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ" });
    }
    res.json(updated);
  } catch (error) {
    res.status(400).json({ message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i", error });
  }
};

// [DELETE] /api/variants/:id (soft delete)
export const deleteVariant = async (req, res) => {
  const variantId = req.params.id;

  try {
    // L·∫•y bi·∫øn th·ªÉ c·∫ßn xo√°
    const variant = await Variant.findById(variantId);
    if (!variant) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ" });
    }

    // ƒê·∫øm s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ c√≤n l·∫°i (ch∆∞a xo√°) c·ªßa s·∫£n ph·∫©m
    const activeVariantsCount = await Variant.countDocuments({
      productId: variant.productId,
      deletedAt: null,
    });

    // N·∫øu ch·ªâ c√≤n 1 th√¨ kh√¥ng cho xo√°
    if (activeVariantsCount <= 1) {
      return res.status(400).json({
        message: "S·∫£n ph·∫©m ph·∫£i c√≥ √≠t nh·∫•t 1 bi·∫øn th·ªÉ. Kh√¥ng th·ªÉ xo√° bi·∫øn th·ªÉ cu·ªëi c√πng.",
      });
    }

    // Xo√° m·ªÅm
    const deleted = await Variant.findByIdAndUpdate(
      variantId,
      { deletedAt: new Date() },
      { new: true }
    );

    res.json({ message: "ƒê√£ xo√° bi·∫øn th·ªÉ (soft delete)", deleted });
  } catch (error) {
    console.error("‚ùå L·ªói xo√° bi·∫øn th·ªÉ:", error);
    res.status(500).json({ message: "Xo√° th·∫•t b·∫°i", error });
  }
};


export const getVariantDetailById = async (req, res) => {
  try {
    const { productId, variantId } = req.params;

    // Ki·ªÉm tra ObjectId h·ª£p l·ªá
    if (
      !mongoose.Types.ObjectId.isValid(productId) ||
      !mongoose.Types.ObjectId.isValid(variantId)
    ) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá" });
    }

    const variant = await Variant.findOne({
      _id: variantId,
      productId,
      deletedAt: null,
    })
      .populate("attributes.attributeId")
      .populate("attributes.attributeValueId");

    if (!variant) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ" });
    }

    res.json(variant);
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y bi·∫øn th·ªÉ chi ti·∫øt:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

