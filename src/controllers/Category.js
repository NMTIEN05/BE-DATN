    import Category from "../model/Category.js";
import { categorySchema } from "../validate/Category.js";

export const getCategory = async (req, res) => {
  try {
    // L·∫•y query parameters t·ª´ URL
    let {
      offset = "0",
      limit = "10",
      sortBy = "createdAt",   // s·∫Øp x·∫øp theo th·ªùi gian t·∫°o
      order = "desc",         // m·∫∑c ƒë·ªãnh gi·∫£m d·∫ßn
      name,                   // l·ªçc theo t√™n n·∫øu c√≥
    } = req.query;
    // √âp ki·ªÉu
    const offsetNumber = parseInt(offset, 10);
    const limitNumber = parseInt(limit, 10);
    const sortOrder = order === "desc" ? -1 : 1;

    // T·∫°o b·ªô l·ªçc n·∫øu c√≥ l·ªçc theo name
    const filter = { deletedAt: null }; // üëâ Ch·ªâ l·∫•y danh m·ª•c ch∆∞a b·ªã xo√°

    if (name) {
      // D√πng regex cho t√¨m ki·∫øm g·∫ßn ƒë√∫ng, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
      filter.name = { $regex: name, $options: "i" };
    }

    // Truy v·∫•n danh s√°ch danh m·ª•c c√≥ ph√¢n trang v√† s·∫Øp x·∫øp
    const categories = await Category.find(filter)
      .sort({ [sortBy]: sortOrder })
      .skip(offsetNumber)
      .limit(limitNumber);

    // ƒê·∫øm t·ªïng s·ªë danh m·ª•c (ph·ª•c v·ª• ph√¢n trang)
    const total = await Category.countDocuments(filter);

    // Tr·∫£ k·∫øt qu·∫£
    res.status(200).json({
      success: true,
      data: categories,
      pagination: {
        total,
        offset: offsetNumber,
        limit: limitNumber,
      },
    });
  } catch (error) {
    console.error("Error fetching categories:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

// ‚úÖ L·∫•y danh m·ª•c theo ID
export const getCategorybyId = async (req, res) => {
  const id = req.params.id;
  try {
    const category = await Category.findById(id);
    if (!category) {
      return res.status(404).json({ message: "Category not found" });
    }
    res.status(200).json(category);
  } catch (error) {
    console.error("Error fetching category by ID:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};

// ‚úÖ T·∫°o danh m·ª•c m·ªõi
export const createCategory = async (req, res) => {
  try {
    const { error } = categorySchema.validate(req.body, { abortEarly: false });
    if (error) {
      const errors = error.details.map((err) => err.message);
      return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors });
    }

    const newCategory = new Category(req.body);
    const saved = await newCategory.save();
    res.status(201).json(saved);
  } catch (err) {
    console.error("‚ùå L·ªói backend:", err);
    res.status(500).json({ message: "L·ªói server", error: err });
  }
};
// ‚úÖ Xo√° danh m·ª•c theo ID
export const deleteCategory = async (req, res) => {
  const { id } = req.params;
  try {
    const category = await Category.findByIdAndUpdate(
      id,
      { deletedAt: new Date() },  // üëà g√°n th·ªùi gian xo√°
      { new: true }
    );
    if (!category) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c" });
    }
    res.status(200).json({ message: "ƒê√£ xo√° m·ªÅm danh m·ª•c th√†nh c√¥ng", category });
  } catch (error) {
    console.error("‚ùå L·ªói xo√° m·ªÅm danh m·ª•c:", error);
    res.status(500).json({ message: "L·ªói server" });
  }
};

export const getDeletedCategories = async (req, res) => {
  try {
    const categories = await Category.find({ deletedAt: { $ne: null } });
    res.json({ data: categories });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server" });
  }
};
// [PUT] /categories/:id/restore -> kh√¥i ph·ª•c
export const restoreCategory = async (req, res) => {
  try {
    const { id } = req.params;

    // Ch·ªâ t√¨m nh·ªØng category ƒë√£ b·ªã xo√° m·ªÅm
    const category = await Category.findOneAndUpdate(
      { _id: id, deletedAt: { $ne: null } }, // Ch·ªâ kh√¥i ph·ª•c n·∫øu ƒë√£ b·ªã xo√° m·ªÅm
      { deletedAt: null },
      { new: true }
    );

    if (!category) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë√£ xo√°" });
    }

    res.status(200).json({ message: "ƒê√£ kh√¥i ph·ª•c danh m·ª•c th√†nh c√¥ng", category });
  } catch (err) {
    console.error("‚ùå L·ªói kh√¥i ph·ª•c:", err);
    res.status(500).json({ message: "L·ªói server", error: err.message });
  }
};

// [DELETE] /categories/:id/force -> xo√° vƒ©nh vi·ªÖn
export const forceDeleteCategory = async (req, res) => {
  try {
    const category = await Category.findByIdAndDelete(req.params.id);
    if (!category) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y danh m·ª•c ƒë·ªÉ xo√°" });
    }
    res.json({ message: "ƒê√£ xo√° vƒ©nh vi·ªÖn", category });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server" });
  }
};

export const updateCategory = async (req, res) => {
  const id = req.params.id;
  try {
    const { error } = categorySchema.validate(req.body, { abortEarly: false });
    if (error) {
      const errors = error.details.map((err) => err.message);
      return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá", errors });
    }

    const updatedCategory = await Category.findByIdAndUpdate(id, req.body, { new: true });
    if (!updatedCategory) {
      return res.status(404).json({ message: "Category not found" });
    }

    res.status(200).json(updatedCategory);
  } catch (error) {
    console.error("Error updating category:", error);
    res.status(500).json({ message: "Internal server error" });
  }
};
